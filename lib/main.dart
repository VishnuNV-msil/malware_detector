import 'package:flutter/material.dart';
import 'package:device_apps/device_apps.dart';
import 'package:flutter/services.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Installed Apps',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(title: 'Installed Apps'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  MyHomePage({Key? key, required this.title}) : super(key: key);

  final String title;

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<Application>? _installedApps;
  List<String> malwarelist = [];

  @override
  void initState() {
    super.initState();
    _loadInstalledApps();
  }

  Future<void> _loadInstalledApps() async {
    List<Application>? apps;

    try {
      apps = await DeviceApps.getInstalledApplications();
      final malwareFile =
          await rootBundle.loadString('lib/assets/known_malware.txt');
      List<String> knownMalware = malwareFile.split('\n');
      knownMalware.map((line) => line.trim()).toList();
      if (knownMalware.length > 0) {
      } else {
        print('No file found');
      }

      for (var app in apps) {
        print(app.appName);
        bool isStringPresent = knownMalware.any((element) =>
            element.toString().toLowerCase() == app.appName.toLowerCase());
        if (isStringPresent) {
          malwarelist.add(app.appName);
        }
      }
    } catch (e) {
      print('Error loading apps: $e');
    }
    if (malwarelist.isNotEmpty) {
      print('malwares found are: ' + malwarelist.toString());
    }
    setState(() {
      _installedApps = apps;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),
      body: ListView.builder(
        itemCount: _installedApps?.length ?? 0,
        itemBuilder: (BuildContext context, int index) {
          final app = _installedApps![index];
          return ListTile(
            leading: app is ApplicationWithIcon
                ? CircleAvatar(backgroundImage: MemoryImage(app.icon))
                : const Icon(Icons.apps),
            title: Text(
              app.appName +
                  (malwarelist.contains(app.appName) ? " (Known malware)" : ''),
              style: TextStyle(
                  color: malwarelist.contains(app.appName)
                      ? Colors.red
                      : Colors.black),
            ),
            subtitle: Text(app.packageName),
          );
        },
      ),
    );
  }
}
